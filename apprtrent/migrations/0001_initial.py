# Generated by Django 2.1.1 on 2018-10-02 11:59

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'użytkownik',
                'verbose_name_plural': 'użytkownicy',
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Appartment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_name', models.CharField(max_length=128, verbose_name='Nazwa apartamentu')),
                ('description', models.TextField(verbose_name='Opis apartamentu')),
                ('address_code', models.CharField(help_text='00-000', max_length=6, verbose_name='kod')),
                ('address_str', models.CharField(max_length=128, verbose_name='Ulica i nr')),
                ('address_no', models.CharField(max_length=16, null=True, verbose_name='nr lokalu')),
                ('area', models.SmallIntegerField(verbose_name='powierzchnia')),
                ('floor', models.SmallIntegerField(verbose_name='piętro')),
                ('no_of_rooms', models.SmallIntegerField(verbose_name='liczba pokoi')),
                ('no_of_guests', models.SmallIntegerField(verbose_name='liczba osób')),
                ('no_of_beds', models.SmallIntegerField(verbose_name='liczba łóżek')),
                ('own_parking', models.BooleanField(default=False, verbose_name='miejsce parkingowe')),
                ('facilities', models.SmallIntegerField(choices=[(1, 'wifi'), (2, 'TV kablowa'), (3, 'TV'), (4, 'winda'), (4, 'wyposażona kuchnia'), (5, 'zestaw do parzenia kawy'), (6, 'żelazko'), (7, 'suszarka'), (8, 'pralka'), (9, 'taras/balkon'), (10, 'klimatyzacja'), (11, 'prysznic'), (12, 'wanna'), (13, 'piekarnik'), (14, 'mikrofalówka'), (15, 'kominek')], verbose_name='Udogodnienia/Wyposażenie')),
                ('price', models.DecimalField(decimal_places=2, max_digits=6)),
                ('deposit', models.SmallIntegerField(choices=[(1, '100'), (2, '200'), (3, '300'), (4, '400'), (5, '500'), (6, '600')], verbose_name='zwrotna kaucja')),
            ],
            options={
                'ordering': ['address_city', 'price'],
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, verbose_name='Nazwa artykułu')),
                ('article_text', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checkin_date', models.DateTimeField(verbose_name='Rezerwacja od dnia')),
                ('checkout_date', models.DateTimeField(verbose_name='Rezerwacja do dnia')),
                ('appartment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apprtrent.Appartment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city_name', models.CharField(max_length=60, verbose_name='miasto')),
            ],
        ),
        migrations.CreateModel(
            name='Fee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='dodatkowa opłata')),
                ('fee_value', models.DecimalField(decimal_places=2, max_digits=6)),
            ],
        ),
        migrations.CreateModel(
            name='Owner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=30, null=True, verbose_name='Imię')),
                ('last_name', models.CharField(max_length=64, null=True, verbose_name='Nazwisko')),
                ('company_name', models.CharField(max_length=128, null=True, verbose_name='Nazwa firmy')),
                ('if_vat', models.BooleanField(default=True, help_text='Czy jest płatnikiem VAT', verbose_name='płatnik VAT')),
                ('vat_number', models.CharField(max_length=10, null=True, verbose_name='NIP')),
                ('address_city', models.CharField(max_length=128, verbose_name='Miasto')),
                ('address_code', models.CharField(help_text='00-000', max_length=6, verbose_name='kod')),
                ('address_str', models.CharField(max_length=128, verbose_name='Ulica i nr')),
                ('address_no', models.CharField(max_length=16, null=True, verbose_name='nr lokalu')),
                ('tel_no', models.CharField(max_length=32, null=True, verbose_name='Nr telefonu')),
                ('e_mail', models.EmailField(max_length=254, null=True, verbose_name='Email')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Dodatkowe informacje')),
            ],
            options={
                'verbose_name': 'Właścicel',
                'verbose_name_plural': 'Właściciele',
            },
        ),
        migrations.AddField(
            model_name='appartment',
            name='address_city',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apprtrent.City'),
        ),
        migrations.AddField(
            model_name='appartment',
            name='fees',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apprtrent.Fee'),
        ),
        migrations.AddField(
            model_name='appartment',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apprtrent.Owner'),
        ),
    ]
